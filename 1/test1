#src github


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score, f1_score, precision_score, recall_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

# Load dataset
print("Loading dataset...")
mal_mem_df = pd.read_csv('data.csv')
mal_mem_df.fillna(method="ffill", inplace=True)

# Ensure all expected columns exist
expected_columns = {"Category", "Class"}
if not expected_columns.issubset(mal_mem_df.columns):
    raise ValueError(f"Missing columns in dataset! Expected {expected_columns}, but got {mal_mem_df.columns}")

# Convert Class column to categorical
mal_mem_df["Class"] = mal_mem_df["Class"].astype("category")

# Function to split category into category and variant
def split_category(column):
    parts = column.split("-")
    return parts[0] if len(parts) > 1 else column, parts[1] if len(parts) > 1 else "Unknown"

# Apply function to extract malware category and variant
if "Category" in mal_mem_df.columns:
    mal_mem_df["category"], mal_mem_df["category_name"] = zip(*mal_mem_df["Category"].apply(split_category))

# Encode categorical labels
def label_encoder(column):
    le = LabelEncoder()
    return le.fit_transform(column)

mal_mem_df["category"] = label_encoder(mal_mem_df["category"])
mal_mem_df["category_name"] = label_encoder(mal_mem_df["category_name"])
mal_mem_df["class"] = label_encoder(mal_mem_df["Class"])

# Drop unnecessary columns
mal_mem_df.drop(["Category", "Class"], axis=1, inplace=True)

# Define classifiers
classifiers = [
    ("Adaboost", AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=10), n_estimators=50)),
    ("Logistic Regression", LogisticRegression(max_iter=10000)),
    ("Support Vector", SVC(kernel="linear", random_state=42)),
    ("Decision Tree", DecisionTreeClassifier(random_state=42, min_samples_leaf=10, min_samples_split=5)),
    ("Random Forest", RandomForestClassifier(n_estimators=50))
]

# Function to train and evaluate models
def train_and_evaluate(X, y, task_name):
    print(f"\n==== {task_name} ====")

    # Scale features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

    # Store metrics
    metrics_df = pd.DataFrame(columns=["Model Name", "Accuracy Score", "F1 Score", "Precision Score", "Recall Score"])

    for classifier_name, classifier in classifiers:
        classifier.fit(X_train, y_train)
        y_pred = classifier.predict(X_test)

        # Print Classification Report
        print(f"\nClassifier: {classifier_name}")
        print(classification_report(y_test, y_pred))

        # Store performance metrics
        new_row = pd.DataFrame({
            "Model Name": [classifier_name],
            "Accuracy Score": [accuracy_score(y_test, y_pred)],
            "F1 Score": [f1_score(y_test, y_pred, average='weighted')],
            "Precision Score": [precision_score(y_test, y_pred, average='weighted')],
            "Recall Score": [recall_score(y_test, y_pred, average='weighted')]
        })

        metrics_df = pd.concat([metrics_df, new_row], ignore_index=True)

    # Plot model performance
    plt.figure()
    plt.plot(metrics_df["Model Name"], metrics_df["Accuracy Score"], color="red", marker=",", label="Accuracy")
    plt.plot(metrics_df["Model Name"], metrics_df["F1 Score"], color="blue", marker=".", label="F1 Score")
    plt.plot(metrics_df["Model Name"], metrics_df["Precision Score"], color="green", marker="*", label="Precision")
    plt.plot(metrics_df["Model Name"], metrics_df["Recall Score"], color="orange", marker="x", label="Recall")
    plt.xticks(rotation=90)
    plt.legend()
    plt.title(f"Performance for {task_name}")
    plt.show()

# **Task 1: Classify Benign vs. Malware**
X_task1 = mal_mem_df.drop(columns=["class"])
y_task1 = mal_mem_df["class"]
train_and_evaluate(X_task1, y_task1, "Benign vs. Malware Classification")

# **Task 2: Classify Malware Category**
X_task2 = mal_mem_df.drop(columns=["category"])
y_task2 = mal_mem_df["category"]
train_and_evaluate(X_task2, y_task2, "Malware Category Classification")

# **Task 3: Classify Malware Variants**
X_task3 = mal_mem_df.drop(columns=["category_name"])
y_task3 = mal_mem_df["category_name"]
train_and_evaluate(X_task3, y_task3, "Malware Variant Classification")
