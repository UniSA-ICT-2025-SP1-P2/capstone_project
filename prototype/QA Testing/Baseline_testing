#Import libraries
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import unittest
import os
import pandas as pd
import json
from selenium.webdriver.support.ui import WebDriverWait, Select
from flask import Flask
from flask_testing import TestCase

# File Upload Component Tests
def test_file_upload_functionality(self):
    """Test that file upload works and preview is displayed"""
    # Find file input element
    file_input = self.driver.find_element(By.ID, "csv-file-input")
        
    # Create a test CSV file
    test_csv_path = os.path.join(os.getcwd(), "test_data.csv")
    with open(test_csv_path, "w") as f:
        f.write("feature1,feature2,target\n1,2,0\n3,4,1\n5,6,0")
        
    # Upload the file
    file_input.send_keys(test_csv_path)
        
    # Wait for preview to appear
    preview_table = self.wait.until(
        EC.visibility_of_element_located((By.ID, "file-preview"))
        )
        
    # Verify preview shows correct data
    table_rows = preview_table.find_elements(By.TAG_NAME, "tr")
    self.assertEqual(len(table_rows), 4)  # Header + 3 data rows
        
    # Clean up
    os.remove(test_csv_path)

#Test to make sure app only accepts csv files
def test_file_format_validation(self):
    """Test validation of file formats"""
    # Find file input element
    file_input = self.driver.find_element(By.ID, "csv-file-input")
        
    # Create a test text file (not CSV)
    test_file_path = os.path.join(os.getcwd(), "invalid.txt")
    with open(test_file_path, "w") as f:
        f.write("This is not a CSV file")
        
    # Upload the file
    file_input.send_keys(test_file_path)
        
    # Wait for error message
    error_message = self.wait.until(
        EC.visibility_of_element_located((By.CLASS_NAME, "error-message"))
        )
        
    # Verify error message is shown
    self.assertIn("Invalid file format", error_message.text)
        
    # Clean up
    os.remove(test_file_path)

#Test that each dataset can be selected from drop down list
def test_dataset_selection(self):
    """Test that each dataset can be selected"""
    # Find dropdown element
    dataset_dropdown = self.wait.until(
        EC.presence_of_element_located((By.ID, "dataset-select"))
        )
        
    # Get all options
    select = Select(dataset_dropdown)
    options = select.options
        
    # Try selecting each option
    for i in range(1, len(options)):  # Skip the first option if it's a placeholder
        select.select_by_index(i)
            
        # Verify selection worked (dataset description updates)
        dataset_description = self.wait.until(
            EC.visibility_of_element_located((By.ID, "dataset-description"))
            )
        self.assertTrue(len(dataset_description.text) > 0)

#Test to make sure model selected is changed in the code
def test_model_selection(self):
    """Test that each model can be selected"""
    # Find model selection container
    model_container = self.wait.until(
        EC.presence_of_element_located((By.ID, "model-selection"))
        )
        
    # Get all model options
    model_options = model_container.find_elements(By.CLASS_NAME, "model-option")
        
    # Try selecting each model
    for model_option in model_options:
        model_option.click()
            
        # Verify selection worked (model parameters form updates)
        parameters_form = self.wait.until(
            EC.visibility_of_element_located((By.ID, "model-parameters"))
            )
        self.assertTrue(parameters_form.is_displayed())